function Cell.new 0
push constant 13
call Memory.alloc 1
pop pointer 0
push argument 1
pop this 0
push argument 0
pop this 1
push argument 0
push argument 2
call Math.multiply 2
pop this 4
push argument 1
push argument 3
call Math.multiply 2
pop this 2
push argument 0
push constant 1
add
push argument 2
call Math.multiply 2
push constant 1
sub
pop this 8
push argument 1
push constant 1
add
push argument 3
call Math.multiply 2
push constant 1
sub
pop this 3
push constant 0
pop this 9
push constant 4
call Array.new 1
pop this 10
push constant 4
call Array.new 1
pop this 11
push constant 0
push this 10
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 10
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 10
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 10
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 4
pop this 12
push argument 5
pop this 6
push argument 6
pop this 7
push pointer 0
return
function Cell.dispose 0
push argument 0
pop pointer 0
push this 10
call Array.dispose 1
pop temp 0
push this 11
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Cell.draw 0
push argument 0
pop pointer 0
push constant 0
push this 10
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
goto IF_END0
label IF_FALSE0
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_END0
push this 2
push this 4
push this 3
push this 4
call Screen.drawLine 4
pop temp 0
push constant 1
push this 10
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
call Screen.setColor 1
pop temp 0
goto IF_END1
label IF_FALSE1
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_END1
push this 3
push this 4
push this 3
push this 8
call Screen.drawLine 4
pop temp 0
push constant 2
push this 10
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
call Screen.setColor 1
pop temp 0
goto IF_END2
label IF_FALSE2
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_END2
push this 2
push this 8
push this 3
push this 8
call Screen.drawLine 4
pop temp 0
push constant 3
push this 10
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
call Screen.setColor 1
pop temp 0
goto IF_END3
label IF_FALSE3
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_END3
push this 2
push this 4
push this 2
push this 8
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Cell.checkNeighbors 13
push argument 0
pop pointer 0
push pointer 0
push this 0
push this 1
push constant 1
sub
call Cell.getIndexFrom2Dto1D 3
pop local 5
push pointer 0
push this 0
push constant 1
add
push this 1
call Cell.getIndexFrom2Dto1D 3
pop local 8
push pointer 0
push this 0
push this 1
push constant 1
add
call Cell.getIndexFrom2Dto1D 3
pop local 7
push pointer 0
push this 0
push constant 1
sub
push this 1
call Cell.getIndexFrom2Dto1D 3
pop local 6
push constant 1
neg
pop local 10
push local 5
push constant 1
neg
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 5
push this 12
add
pop pointer 1
push that 0
pop local 0
push local 0
call Cell.getVisited 1
pop local 12
push local 12
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 10
push constant 1
add
pop local 10
push local 10
push this 11
add
push local 5
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE1
label IF_FALSE0
push local 8
push constant 1
neg
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 8
push this 12
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.getVisited 1
pop local 12
push local 12
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 10
push constant 1
add
pop local 10
push local 10
push this 11
add
push local 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE3
label IF_FALSE2
push local 7
push constant 1
neg
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 7
push this 12
add
pop pointer 1
push that 0
pop local 2
push local 2
call Cell.getVisited 1
pop local 12
push local 12
not
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 10
push constant 1
add
pop local 10
push local 10
push this 11
add
push local 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE5
label IF_FALSE4
push local 6
push constant 1
neg
eq
not
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 6
push this 12
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.getVisited 1
pop local 12
push local 12
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 10
push constant 1
add
pop local 10
push local 10
push this 11
add
push local 6
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE7
label IF_FALSE6
push local 10
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 1
neg
return
label IF_FALSE8
push local 10
call Random.randInt 1
pop local 11
push local 11
push this 11
add
pop pointer 1
push that 0
pop local 9
push local 9
return
function Cell.getIndexFrom2Dto1D 0
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
return
label IF_FALSE0
push argument 2
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
neg
return
label IF_FALSE1
push argument 1
push this 7
push constant 1
sub
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
neg
return
label IF_FALSE2
push argument 2
push this 6
push constant 1
sub
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
neg
return
label IF_FALSE3
push argument 1
push argument 2
push this 7
call Math.multiply 2
add
return
function Cell.setVisited 0
push argument 0
pop pointer 0
push argument 1
pop this 9
push constant 0
return
function Cell.getVisited 0
push argument 0
pop pointer 0
push this 9
return
function Cell.getX 0
push argument 0
pop pointer 0
push this 0
return
function Cell.getY 0
push argument 0
pop pointer 0
push this 1
return
function Cell.setWall 0
push argument 0
pop pointer 0
push argument 1
push this 10
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return

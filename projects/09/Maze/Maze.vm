function Maze.new 4
push constant 7
call Memory.alloc 1
pop pointer 0
push argument 2
pop this 2
push argument 3
pop this 3
push argument 0
push this 2
call Math.divide 2
pop this 4
push argument 1
push this 3
call Math.divide 2
pop this 5
push this 4
push this 5
call Math.multiply 2
call Array.new 1
pop this 6
push constant 0
pop local 0
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push this 4
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 5
lt
not
if-goto WHILE_END1
push local 0
push local 1
push this 2
push this 3
push this 6
push this 4
push this 5
call Cell.new 7
pop local 3
push local 2
push this 6
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Maze.drawWalls 3
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 4
push this 5
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push this 6
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.draw 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Maze.draw 7
push argument 0
pop pointer 0
push pointer 0
call Maze.drawAllBlack 1
pop temp 0
push pointer 0
call Maze.drawWalls 1
pop temp 0
push constant 0
pop local 3
push this 4
push this 5
call Math.multiply 2
call Array.new 1
pop local 6
push argument 1
push this 6
add
pop pointer 1
push that 0
pop local 4
push local 4
push constant 0
not
call Cell.setVisited 2
pop temp 0
label WHILE_EXP0
push local 3
push constant 1
neg
gt
not
if-goto WHILE_END0
push local 4
call Cell.checkNeighbors 1
pop local 2
push local 2
push constant 1
neg
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push this 6
add
pop pointer 1
push that 0
pop local 5
push local 5
push constant 0
not
call Cell.setVisited 2
pop temp 0
push pointer 0
push local 1
push local 2
call Maze.removeWalls 3
pop temp 0
push local 3
push local 6
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
push local 5
pop local 4
push local 2
pop local 1
push local 4
push constant 0
not
call Cell.setVisited 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 3
push constant 1
sub
pop local 3
push local 3
push constant 1
neg
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 3
push local 6
add
pop pointer 1
push that 0
pop local 1
push local 1
push this 6
add
pop pointer 1
push that 0
pop local 4
label IF_FALSE1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push local 6
call Array.dispose 1
pop temp 0
push constant 0
return
function Maze.drawAllBlack 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push constant 511
push constant 255
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Maze.resetMaze 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 4
push this 5
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push this 6
add
pop pointer 1
push that 0
pop local 1
push local 1
push constant 0
push constant 1
call Cell.setWall 3
pop temp 0
push local 1
push constant 1
push constant 1
call Cell.setWall 3
pop temp 0
push local 1
push constant 2
push constant 1
call Cell.setWall 3
pop temp 0
push local 1
push constant 3
push constant 1
call Cell.setWall 3
pop temp 0
push local 1
push constant 0
call Cell.setVisited 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Maze.removeWalls 6
push argument 0
pop pointer 0
push argument 1
push this 6
add
pop pointer 1
push that 0
pop local 0
push argument 2
push this 6
add
pop pointer 1
push that 0
pop local 1
push local 0
call Cell.getX 1
pop local 2
push local 0
call Cell.getY 1
pop local 3
push local 1
call Cell.getX 1
pop local 4
push local 1
call Cell.getY 1
pop local 5
push local 4
push local 2
sub
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
push constant 0
call Cell.setWall 3
pop temp 0
push local 1
push constant 3
push constant 0
call Cell.setWall 3
pop temp 0
goto IF_END0
label IF_FALSE0
push local 0
push constant 3
push constant 0
call Cell.setWall 3
pop temp 0
push local 1
push constant 1
push constant 0
call Cell.setWall 3
pop temp 0
label IF_END0
push local 5
push local 3
sub
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 2
push constant 0
call Cell.setWall 3
pop temp 0
push local 1
push constant 0
push constant 0
call Cell.setWall 3
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push constant 0
push constant 0
call Cell.setWall 3
pop temp 0
push local 1
push constant 2
push constant 0
call Cell.setWall 3
pop temp 0
label IF_END1
push local 0
call Cell.draw 1
pop temp 0
push local 1
call Cell.draw 1
pop temp 0
push constant 0
return
function Maze.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 4
push this 5
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push this 6
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 6
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Maze.getNumberOfRows 0
push argument 0
pop pointer 0
push this 4
return
function Maze.getNumberOfCols 0
push argument 0
pop pointer 0
push this 5
return

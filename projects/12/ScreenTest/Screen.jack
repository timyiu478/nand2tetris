// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean isBlack;
    static Array powersOfTwo;
    static int n;

    /** Initializes the Screen. */
    function void init() {
      var int i, sum;

      let isBlack = true;
      let n = 16;
      let powersOfTwo = Array.new(n);

      let i=1;
      let sum=1;
      let powersOfTwo[0] = sum;
      while(i<n) {
        let sum = sum + sum;
        let powersOfTwo[i] = sum;
        let i = i + 1;
      }
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = 16384;
      while(i<24576) {
        do Memory.poke(i, 0);
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let isBlack = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int addr, val, t, i;
      let t = x / 16;
      let addr = 32 * y + t + 16384;
      let val = Memory.peek(addr);

      let i=x-(t*16);
      if (isBlack) { let val = (val | powersOfTwo[i]); }
      else { let val = val & ~(powersOfTwo[i]); }

      do Memory.poke(addr, val);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a,b,d,x,y, dx, dy;
      if (y1 = y2) {
        let x = Math.min(x1, x2);
        let x2 = Math.max(x1, x2);
        while (x < (x2+1)) {
          do Screen.drawPixel(x, y1);
          let x = x + 1;
        }
        return;
      }
      if (x1 = x2) {
        let y = Math.min(y1, y2);
        let y2 = Math.max(y1, y2);
        while (y < (y2+1)) {
          do Screen.drawPixel(x1, y);
          let y = y + 1;
        }
        return;
      }
      let a = 0;
      let b = 0;
      let d = 0;
      if (y1<y2) {
        let dy = y2 - y1;
      } else {
        let dy = y1 - y2;
      }
      if (x1<x2) {
        let dx = x2 - x1;
      } else {
        let dx = x1 - x2;
      }
        
      let x = x1;
      let y = y1;
      while ((a<(dx+1))&(b<(dy+1))) {
        if ((x1 < x2)&(y1<y2)) { do Screen.drawPixel(x+a, y+b); }
        if ((x1 > x2)&(y1<y2)) { do Screen.drawPixel(x-a, y+b); }
        if ((x1 < x2)&(y1>y2)) { do Screen.drawPixel(x+a, y-b); }
        if ((x1 > x2)&(y1>y2)) { do Screen.drawPixel(x-a, y-b); }
        if (d<0) { let a = a+1; let d = d+dy; }
        else { let b = b+1; let d = d-dx; }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int miny, maxy,y;
      let miny = Math.min(y1,y2);
      let maxy = Math.max(y1,y2)+1;
      let y = miny;
      while (y<maxy) { do Screen.drawLine(x1,y,x2,y); let y=y+1; }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int sqr, dy;
      if (r > 181) { return; }
      let dy = -r;

      while(dy<(r+1)) {
        let sqr = Math.sqrt((r*r)-(dy*dy));
        do Screen.drawLine(x-sqr, y+dy, x+sqr, y+dy);
        let dy = dy+1;
      }
      return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList; 

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048; // heapBase
      let freeList = heap;
      let freeList[0] = 0; // next
      let freeList[1] = 14334; // lenght
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      var int v;
      let v = ram[address];
      return v;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int segmentSize;
      var Array baseAddress;

      let baseAddress = freeList;
      let segmentSize = freeList[1];
      if (segmentSize > (size + 1)) {
        let baseAddress = baseAddress + segmentSize - size;
        let baseAddress[0] = 0;
        let baseAddress[1] = size;
        let freeList[1] = segmentSize - size;
        return baseAddress;
      } 

      while (~(baseAddress[0] = 0)) {
        let baseAddress = baseAddress[0];
        let segmentSize = baseAddress[1];
        if (segmentSize > (size + 1)) {
          let baseAddress[1] = segmentSize - size;
          let baseAddress = baseAddress + segmentSize - size;
          let baseAddress[0] = 0;
          let baseAddress[1] = size;
          return baseAddress;
        } 
      }

      return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array baseAddress;

      let baseAddress = freeList;

      while (~(baseAddress[0] = 0)) {
        let baseAddress = baseAddress[0];
      }
      
      let baseAddress[0] = o;

      return;
    }    
}

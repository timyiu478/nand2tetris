// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=addressRegisterIn);
    Not(in=instruction[15], out=isTypeAInstruction);
    Or(a=isTypeAInstruction, b=instruction[5], out=isLoadAddressToA); // load address to A register if is type A instruction or d1 flag of C instruction is 1
    ARegister(in=addressRegisterIn, load=isLoadAddressToA, out=addressRegisterOut, out[0..14]=addressM); // A Register
    And(a=instruction[15], b=instruction[4], out=isLoadALUOutToD); // load aluOutput to D register if is type C instruction and d2 flag of C instruction is 1
    DRegister(in=aluOutput, load=isLoadALUOutToD, out=dataRegisterOut); // D Register
    Mux16(a=addressRegisterOut, b=inM, sel=instruction[12], out=aluInputY);
    ALU(x=dataRegisterOut, y=aluInputY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, out=outM, zr=isZero, ng=isNegative);
    And(a=instruction[15], b=instruction[3], out=writeM); // writeM if is type C instruction and d3 flag of C instruction is 1
    Not(in=isNegative, out=isNotNegative);
    Not(in=isZero, out=isNotZero);
    And(a=isNotZero, b=isNotNegative, out=isPositive);
    And(a=instruction[0], b=isPositive, out=jumpIfOutIsPostive);
    And(a=instruction[1], b=isZero, out=jumpIfOutIsZero);
    And(a=instruction[2], b=isNegative, out=jumpIfOutIsNegative);
    And(a=instruction[2], b=instruction[0], out=jumpConditionIsNotZero);
    And(a=jumpConditionIsNotZero, b=isNotZero, out=jumpIfIsNotZero);
    And(a=jumpConditionIsNotZero, b=instruction[1], out=jump);
    Or(a=jumpIfOutIsPostive, b=jumpIfOutIsZero, out=tempIsJump1);
    Or(a=tempIsJump1, b=jumpIfOutIsNegative, out=tempIsJump2);
    Or(a=tempIsJump2, b=jumpIfIsNotZero, out=tempIsJump3);
    Or(a=tempIsJump3, b=jump, out=isJump);
    And(a=isJump, b=instruction[15], out=isJumpAndTypeCInstruction);
    Or(a=reset, b=isJumpAndTypeCInstruction, out=isNotInc);
    Not(in=isNotInc, out=isInc);
    PC(in=addressRegisterOut, load=isJumpAndTypeCInstruction, inc=isInc, reset=reset, out[0..14]=pc);
}
